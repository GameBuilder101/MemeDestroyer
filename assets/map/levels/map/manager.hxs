// Requires variables levels:Array<Dynamic>, mainThemeID:String, finalLevelThemeID:String

var hud:MapHud;

var player:Entity;
var playerController:GameScript;

// True when entering a level
var entering:Bool = false;
// True when moving between spots
var moving:Bool = false;

// The movement arrow sprites used to indicate where the player can navigate
var upArrow:AssetSprite;
var downArrow:AssetSprite;
var leftArrow:AssetSprite;
var rightArrow:AssetSprite;
// Arrow animation variables
var arrowAnimPercent:Float = 0.0;
var arrowAnimDir:Int = 1;

// The index of the current level
var currentLevel:Int = 0;
var spots:Array;

// The main theme music for the level
var mainTheme:AssetMusic;

function onLoaded()
{
	hud = new MapHud();
	state.add(hud);

	player = state.spawn("entities/map_player");
	playerController = player.getComponent("controller");

	spots = new Array();
	var i:Int = 0;
	var spot:Entity;
	var spotComponent:GameScript;
	for (level in levels)
	{
		spot = state.spawn(level.spotEntityID, level.position[0], level.position[1]);
		spotComponent = spot.getComponent("spot");
		spotComponent.call("setSpotID", [i]);
		spotComponent.call("setTarget", [level.id]);
		spotComponent.call("setLocked", [false]);
		spots.push(spot);
		i++;
	}

	upArrow = new AssetSprite(0.0, 0.0, null, "levels/map/sprites/movement_arrow");
	upArrow.animation.play("up");
	upArrow.visible = false;
	state.effects.add(upArrow);

	downArrow = new AssetSprite(0.0, 0.0, null, "levels/map/sprites/movement_arrow");
	downArrow.animation.play("down");
	downArrow.visible = false;
	state.effects.add(downArrow);

	leftArrow = new AssetSprite(0.0, 0.0, null, "levels/map/sprites/movement_arrow");
	leftArrow.animation.play("left");
	leftArrow.visible = false;
	state.effects.add(leftArrow);

	rightArrow = new AssetSprite(0.0, 0.0, null, "levels/map/sprites/movement_arrow");
	rightArrow.animation.play("right");
	rightArrow.visible = false;
	state.effects.add(rightArrow);

	// Restore data from save
	var data:Dynamic = GameSaver.instance.getGameData("lastMapLevelIndex");
	if (data != null)
		currentLevel = data;

	player.setPosition(spots[currentLevel].x, spots[currentLevel].y); // Start the player at the initial spot
	stopMoving(); // Update the initial spot visuals

	mainTheme = AssetMusicRegistry.getAsset(mainThemeID);
	MusicManager.transition(mainTheme, 1.0);
}

function onUpdate(elapsed:Float)
{
	if (!entering && Controls.interact.check())
		startEntering();

	if (!entering)
	{
		if (moving && !playerController.call("getMoving"))
			stopMoving();
		else if (!moving)
			movementCheck(elapsed);
	}

	// Make the camera follow the player
	FlxG.camera.scroll.y = player.y - FlxG.camera.height / 2.0;

	// Stop the camera from going past the map
	if (FlxG.camera.scroll.y < 0.0)
		FlxG.camera.scroll.y = 0.0;
	else if (FlxG.camera.scroll.y > state.background.height - FlxG.camera.height)
		FlxG.camera.scroll.y = state.background.height - FlxG.camera.height;

	upArrow.setPosition(player.x, player.y);
	downArrow.setPosition(player.x, player.y);
	leftArrow.setPosition(player.x, player.y);
	rightArrow.setPosition(player.x, player.y);

	// Continue animating the arrow alpha in one direction, until it reaches an end, and then flip direction
	arrowAnimPercent += elapsed * arrowAnimDir * 0.75;
	if (arrowAnimDir > 0 && arrowAnimPercent >= 1.0)
	{
		arrowAnimPercent = 1.0;
		arrowAnimDir *= -1;
	}
	else if (arrowAnimPercent <= 0.4)
	{
		arrowAnimPercent = 0.4;
		arrowAnimDir *= -1;
	}
	upArrow.alpha = arrowAnimPercent;
	downArrow.alpha = arrowAnimPercent;
	leftArrow.alpha = arrowAnimPercent;
	rightArrow.alpha = arrowAnimPercent;

	hud.startLevelText.text = "Press \"" + Controls.interact.getDisplayName(0) + "\" to start";
	hud.startLevelText.alpha = arrowAnimPercent; // Also animate start level text

	var money:Int = GameSaver.instance.getGameData("money");
	hud.moneyIndicator.setValues(money, money);
}

// Checks for player movement input
function movementCheck(elapsed:Float)
{
	var prevLevel:Int = currentLevel;
	if (Controls.moveUp.check() && levels[currentLevel].connections[0] >= 0)
		currentLevel = levels[currentLevel].connections[0];
	else if (Controls.moveDown.check() && levels[currentLevel].connections[1] >= 0)
		currentLevel = levels[currentLevel].connections[1];
	else if (Controls.moveLeft.check() && levels[currentLevel].connections[2] >= 0)
		currentLevel = levels[currentLevel].connections[2];
	else if (Controls.moveRight.check() && levels[currentLevel].connections[3] >= 0)
		currentLevel = levels[currentLevel].connections[3];

	if (currentLevel != prevLevel) // If the player made a move input
		startMoving(prevLevel);
}

// Starts the entering animation for a level
function startEntering()
{
	entering = true;

	GameSaver.instance.setGameData("lastMapLevelIndex", currentLevel);

	state.transOut = TransitionDataRegistry.getAsset("transitions/start_level_out");
	FlxG.switchState(new PlayState(levels[currentLevel].id));
	// Zoom in the camera while transitioning
	FlxTween.tween(FlxG.camera, {zoom: 2.0}, 2.0);

	MusicManager.fadeOut(0.0);
	AssetSoundRegistry.getAsset("ui/title/sounds/start_game").play();
}

// Starts the movement animation from one spot to another
function startMoving(prevLevel:Int)
{
	moving = true;
	playerController.call("moveTo", [new Point(spots[currentLevel].x, spots[currentLevel].y), prevLevel < levels.length - 1 && currentLevel < levels.length - 1]);

	// Disable the previous spot
	spots[prevLevel].getComponent("spot").call("setInteractable", [false]);

	upArrow.visible = false;
	downArrow.visible = false;
	leftArrow.visible = false;
	rightArrow.visible = false;

	hud.hideLevelPanel();
	hud.startLevelText.visible = false;

	// Change the music when at the final level spot
	if (currentLevel >= levels.length - 1)
		MusicManager.transition(AssetMusicRegistry.getAsset(finalLevelThemeID), 3.0);
	else if (prevLevel >= levels.length - 1)
		MusicManager.transition(AssetMusicRegistry.getAsset(mainThemeID), 3.0);
}

// Stops the movement animation from one spot to another
function stopMoving()
{
	moving = false;

	spots[currentLevel].getComponent("spot").call("setInteractable", [true]);
	var target = spots[currentLevel].getComponent("spot").call("getTarget");
	var color = spots[currentLevel].mainSprite.color;

	upArrow.visible = levels[currentLevel].connections[0] >= 0;
	upArrow.color = color;
	downArrow.visible = levels[currentLevel].connections[1] >= 0;
	downArrow.color = color;
	leftArrow.visible = levels[currentLevel].connections[2] >= 0;
	leftArrow.color = color;
	rightArrow.visible = levels[currentLevel].connections[3] >= 0;
	rightArrow.color = color;

	var canGetHighScore:Bool = false;
	for (component in target.components)
	{
		if (component == "levels/_shared/combat_manager")
		{
			canGetHighScore = true;
			break;
		}
	}

	hud.levelPanel.setValues(50.0, 100.0);
	hud.levelPanel.setLabel(target.name);
	hud.levelPanel.setIndicatorColor(color);
	// Use a simple panel if it's not possible to geta high score for the level
	hud.levelPanel.setStyle(canGetHighScore ? "normal" : "simple");
	hud.showLevelPanel();
	hud.startLevelText.visible = true;
}

function getHud():MapHud
{
	return hud;
}
