// Requires variables unlockSoundID:String

// Used to identify this spot
var spotID:Int;

var interactable:Bool;

var targetLevel;
var locked:Bool = true;
var setInitialLocked:Bool;

function onUpdate(elapsed:Float)
{
    if (interactable)
        animation.play("interactable");
    else
    {
        if (locked)
            animation.play("locked");
        else
            animation.play("idle");
    }
}

function setSpotID(id:Int)
{
    spotID = id;
}

function getSpotID():Int
{
    return spotID;
}

function setInteractable(value:Bool)
{
    interactable = value;
}

// Sets the target level
function setTarget(id:String)
{
    targetLevel = LevelRegistry.getAsset(id);
    setLocked(locked); // Do this to update the color
}

// Gets the target level, as a LevelData
function getTarget()
{
    return targetLevel;
}

// Sets the locked state and updates the color
function setLocked(value:Bool)
{
    var prevLocked:Bool = locked;
    locked = value;

    if (locked) // The locked sprite is un-colored
    {
        this.mainSprite.color = colorString("#ffffff");
        return;
    }
    else if (prevLocked && setInitialLocked) // If just un-locked (and not just starting-out as locked)
    {
        state.spawn("entities/poof_particle", 0.0, 0.0);
        AssetSoundRegistry.getAsset(unlockSoundID).play();
    }
    
    // Set the sprite color to the level color (if it has one)
    for (variable in targetLevel.variables)
    {
        if (variable.name == "titleColor")
        {
            this.mainSprite.color = colorString(variable.value);
            break;
        }
    }

    setInitialLocked = true;
}

function getLocked():Bool
{
    return locked;
}
