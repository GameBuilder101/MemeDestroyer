// Requires variables altEquipSoundID:String, heldSpriteID:String, heldSpriteMode:String, useDelay:Float
var equipper:Entity;

// The always-played equip sound
var equipSound:AssetSound;
var altEquipSound:AssetSound;

// How much time is left until the item can be used again
var currentUseDelay:Float = 0.0;

function onLoaded()
{
	equipSound = AssetSoundRegistry.getAsset("items/_shared/sounds/equip");
	if (altEquipSoundID != null)
		altEquipSound = AssetSoundRegistry.getAsset(altEquipSoundID);
}

function onUpdate(elapsed:Float)
{
	currentUseDelay -= elapsed;
	if (currentUseDelay < 0.0)
		currentUseDelay = 0.0;
}

function onInteracted(entity:Entity)
{
	entity.getComponent("equipper").call("addToInventorySelected", [this]);
}

function onEquip(entity:Entity)
{
	if (equipper != null || entity == equipper)
		return;
	equipper = entity;
	entity.getComponent("equipper").call("getHands").loadFromID(heldSpriteID);

	equipSound.play();
	if (altEquipSound != null)
		altEquipSound.play();
	
	callAll("onEquipped", [entity]);
}

function getHeldSpriteMode():String
{
	return heldSpriteMode;
}

function onUnequip()
{
	if (equipper == null)
		return;
	equipper = null;

	currentUseDelay = 0.0;
	callAll("onUnequipped");
}

function getCanUse():Bool
{
	return currentUseDelay <= 0.0;
}

function onUse(elapsed:Float, riposte:Bool)
{
	currentUseDelay = useDelay;
	callAll("onUsed", [equipper, riposte]);
}
