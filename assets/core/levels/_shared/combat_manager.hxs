// Requires variables bosses:Array<Dynamic>, mainThemeID:String

var hud:CombatHud;

var player:Entity;
var playerHealth:GameScript = null;
var playerEquipper:GameScript = null;
var boss:Entity;
var bossHealth:GameScript = null;
var currentRound:Int = -1;

var spawnParticle:AssetSprite;
var spawnSound:AssetSound;

// The main theme music for the level
var mainTheme:AssetMusic;

// True when the player has died and the level is ending
var deathTransitioning:Bool = false;

function onLoaded()
{
	for (member in state.members) // Re-use any existing combat HUD if one can be found
	{
		if (Std.is(member, CombatHud))
		{
			hud = member;
			break;
		}
	}
	if (hud == null)
		hud = new CombatHud();
	state.add(hud);

	player = state.getEntity("player"); // Re-use any existing player if one can be found
	if (player == null)
	{
		player = state.spawn("entities/player");
		player.screenCenter();
	}
	playerHealth = player.getComponent("health");
	playerEquipper = player.getComponent("equipper");

	hud.playerHealth.setLabel(player.name);
	hud.playerHealth.setIndicatorColor(colorString(playerHealth.get("healthColor")));
	hud.showPlayerHealth();
	for (i in 0...playerEquipper.call("getInventorySize"))
		hud.inventory.addSlot();

	spawnParticle = new AssetSprite(0.0, 0.0, null, "levels/_shared/sprites/spawn_particle");
	spawnParticle.visible = false;
	state.effects.add(spawnParticle);
	spawnSound = AssetSoundRegistry.getAsset("levels/_shared/sounds/spawn");

	mainTheme = AssetMusicRegistry.getAsset(mainThemeID);
}

function onUpdate(elapsed:Float)
{
	state.allowPausing = !hud.dialogueBox.displaying;

	// Health UI
	if (playerHealth != null)
		hud.playerHealth.setValues(playerHealth.call("getHealth"), playerHealth.call("getMaxHealth"));
	if (bossHealth != null)
		hud.bossHealth.setValues(bossHealth.call("getHealth"), bossHealth.call("getMaxHealth"));

	// Inventory UI
	if (playerEquipper != null)
	{
		for (i in 0...playerEquipper.call("getInventorySize"))
			hud.inventory.setItemInSlot(i, playerEquipper.call("getInventoryItem", [i]));
		hud.inventory.setSelectedSlot(playerEquipper.call("getSelectedItemIndex"));
	}

	// Ammo UI
	if (playerEquipper != null)
	{
		var equipped:Entity = playerEquipper.call("getEquippedItem");
		if (equipped != null)
		{
			var weapon = equipped.getComponent("weapon");
			if (weapon != null)
			{
				hud.ammoIndicator.visible = weapon.call("usesAmmo");
				hud.ammoIndicator.setValues(weapon.call("getAmmo"), weapon.call("getMaxAmmo"));
			}
			else
				hud.ammoIndicator.visible = false;
		}
		else
			hud.ammoIndicator.visible = false;
	}

	// Death functionality
	if (getIsPlaying() && !player.alive && !deathTransitioning)
	{
		deathTransitioning = true;

		MusicManager.fadeOut(1.0);
		hud.deathOverlay.display(null, function()
		{
			FlxG.switchState(new PlayState("levels/map"));
		});
	}

	// Next round functionality
	if (getIsPlaying() && boss != null && !boss.alive)
		nextRound();

	spawnParticle.visible = !spawnParticle.animation.finished;
}

function getHud():CombatHud
{
	return hud;
}

// Start the rounds
function start()
{
	if (getIsPlaying()) // If already playing
		end();
	nextRound(); // Start the first round

	MusicManager.transition(mainTheme, 0.0);
}

// End the rounds
function end()
{
	currentRound = -1;
}

function getIsPlaying()
{
	return currentRound >= 0;
}

// Starts the next round
function nextRound()
{
	currentRound++;
	if (currentRound == bosses.length)
	{
		end();
		return;
	}

	boss = state.levelSpawn(bosses[currentRound].spawn);
	bossHealth = boss.getComponent("health");

	hud.bossHealth.setLabel(boss.name);
	hud.bossHealth.setIndicatorColor(colorString(bossHealth.get("healthColor")));
	hud.showBossHealth();

	var color = colorString(bossHealth.get("healthColor"));
	hud.titleOverlay.display({
		title: boss.name,
		subtitle: "Round " + (currentRound + 1),
		color: color,
		style: "fast"
	}, null);

	if (bosses[currentRound].playSpawnEffects)
	{
		spawnParticle.setPosition(boss.x, boss.y);
		spawnParticle.color = color;
		spawnParticle.animation.play("spawn", true);
		spawnParticle.visible = true;
		spawnSound.play();
	}
}
